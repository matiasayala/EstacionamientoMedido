@inject NavigationManager navigationManager
@inject ILoginService loginService
@using Pages.Auth

<nav class="navbar navbar-expand-md fixed-top navbar-dark bg-dark mb-4">
    <div class="container-fluid">
        <a class="navbar-brand" href="#">Sistema de Estacionamiento Medido</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarCollapse" aria-controls="navbarCollapse" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarCollapse">
            <ul class="navbar-nav me-auto mb-2 mb-md-0">
                <li class="nav-item">
                    <NavLink class="nav-link" href="infracciones">
                        Infracciones
                    </NavLink>
                </li>
                <li class="nav-item">
                    @if (isUserAuthenticated)
                    {
                        <NavLink class="nav-link" href="mapa">
                            Mapas
                        </NavLink>
                    }
                    else
                    {
                        <NavLink class="nav-link disabled" href="mapa">
                            Mapas
                        </NavLink>
                    }
                </li>
            </ul>
            <div class="d-flex">
                @if (isUserAuthenticated)
                {
                    <button class="btn btn-outline-danger mr-2" type="submit" @onclick="logout">Desconectarse</button>
                }
                else
                {
                    <button class="btn btn-outline-success mr-2" type="submit" @onclick="Login">Iniciar Sesion</button>
                }
            </div>
        </div>
    </div>
</nav>



@code {
    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }
    private bool collapseNavMenu = false;
    private bool isUserAuthenticated;

    private string NavMenuCssClass => collapseNavMenu ? "open" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    public async override Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);
        var AuthState = await authenticationStateTask;

        isUserAuthenticated = AuthState.User.Identity.IsAuthenticated;
    }

    public async Task logout()
    {
        await loginService.Logout();
    }

    public async Task Login()
    {
        var options = new DigipModalOptions()
        {
            HideFooter = true,
            HideHeader = true,
            ModalBodyPadding = 0,
            Size = ModalSize.Medium,
            CardDesign = false,
        };
        var messageForm = ModalDigip.Show<LoginComponent>("", options);
        var result = await messageForm.Result;
        StateHasChanged();
    }

}