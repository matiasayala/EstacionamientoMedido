@page "/Mapa"

@inject ComercioService comercioService
@inject ZonaService zonaService
@inject UbicacionesService ubicacionesService


<section class="text-dark">
    <div class="container-lg" style="max-width: 85vw;">
        <div class="row g-5">
            <div class="col-3">
                <h4 class="d-flex justify-content-between align-items-center text-center mb-3">
                    <span class="text-primary">Gestion General</span>
                </h4>
                <div class="card-deck mb-2 text-center">
                    <div class="card mb-0 shadow-sm">
                        <div class="card-body">
                            <button class="btn btn-info btn-block" @onclick="PosicionInicial">Ir a Posicion Actual</button>
                            <button class="btn btn-info btn-block" @onclick="PosicionReserva">Ir a Posicion Reserva</button>
                            <button class="btn btn-info btn-block" @onclick="() => MostrarOcultar(ref mostrarUbicacionActual, marker: UbicacionActualMarker)">@(mostrarUbicacionActual ? "Ocultar" : "Mostrar") Posicion Actual</button>
                            <button class="btn btn-info btn-block" @onclick="() => MostrarOcultar(ref mostrarReservaActual, marker: ReservaActualMarker)">@(mostrarReservaActual ? "Ocultar" : "Mostrar") Reserva Actual</button>
                            <button class="btn btn-info btn-block" @onclick="() => MostrarOcultar(ref mostrarComercios, markerList: ComerciosMarkers)">@(mostrarComercios ? "Ocultar" : "Mostrar") Comercios</button>
                            <button class="btn btn-info btn-block" @onclick="() => MostrarOcultar(ref mostrarUbicaciones, markerList: UbicacionesMarkers)">@(mostrarUbicaciones ? "Ocultar" : "Mostrar") Ubicaciones</button>
                        </div>
                    </div>
                </div>
                <div class="card-deck list-group mb-2">
                    @if (queComponenteMostrar == 1)
                    {
                        <MapaUbicacionComponent></MapaUbicacionComponent>
                    }
                    else if (queComponenteMostrar == 2)
                    {
                        <MapaUbicacionReservadaComponent></MapaUbicacionReservadaComponent>
                    }
                    else if (queComponenteMostrar == 3)
                    {
                        <MapaComercioComponent comercio="ComercioClickeado"></MapaComercioComponent>
                    }
                    else if (queComponenteMostrar == 4)
                    {
                        <MapaZonaComponent zona="ZonaClickeada"></MapaZonaComponent>
                    }
                    else
                    {
                        <MapaGenericoComponent></MapaGenericoComponent>
                    }
                </div>
            </div>

            <div class="card col-9 order-md-last p-3">
                <Map @ref="mapRef" MapOptions="@mapOptions"></Map>
            </div>
        </div>
    </div>
</section>

@code {
    private Map mapRef;
    private MapOptions mapOptions;

    private LatLng ubicacionActual = new LatLng(-34.521613, -58.700955);
    private LatLng reservaActual = new LatLng(-34.519563, -58.707372);
    List<Comercio> comerciosList;
    List<Zona> ZonasList;
    List<Ubicacion> UbicacionesList;

    private Comercio ComercioClickeado;
    private Zona ZonaClickeada;

    List<Marker> UbicacionesMarkers = new List<Marker>();
    List<Marker> ComerciosMarkers = new List<Marker>();
    Marker ReservaActualMarker;
    Marker UbicacionActualMarker;

    private int queComponenteMostrar;

    private bool mostrarComercios;
    private bool mostrarUbicaciones;
    private bool mostrarReservaActual;
    private bool mostrarUbicacionActual;

    protected override void OnInitialized()
    {
        InicializarMapa();
        comerciosList = comercioService.GetComerciosCercanos();
        ZonasList = zonaService.GetZonas();
        UbicacionesList = ubicacionesService.GetUbicaciones();
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadComercios();
        await LoadZonas();
        await LoadUbicacionActual();
        await LoadReservaActual();
        await LoadUbicaciones();
        await JsRuntime.MensajeToast("Se obtuvo la ubicacion actual correctamente");
        MostrarOcultar(ref mostrarUbicacionActual, marker: UbicacionActualMarker);
    }

    private void MostrarOcultar(ref bool estado, List<Marker> markerList = null, Marker marker = null)
    {
        estado = !estado;
        if (markerList != null)
            foreach (var item in markerList)
                if (estado) item.AddTo(mapRef); else item.RemoveFrom(mapRef);
        else if(marker != null)
            if (estado) marker.AddTo(mapRef); else marker.RemoveFrom(mapRef);
    }


    private async Task OnClickReservaActual(MouseEvent m)
    {
        queComponenteMostrar = 2;
        StateHasChanged();
        //await JsRuntime.InvokeAsync<string>("alert", $"Ubicacion Ocupada.\nHora Inicio: {ubicacion.Reserva.HoraInicio}.\nHora Fin: {ubicacion.Reserva.HoraFin}.");
    }

    private async Task OnClickUbicacion(MouseEvent m)
    {
        queComponenteMostrar = 1;
        StateHasChanged();
        //var ubicacion = UbicacionesList.FirstOrDefault(x => x.Latitud == m.LatLng.Lat && x.Longitud == m.LatLng.Lng);
        //if (ubicacion != null)
        //    if (ubicacion.Reserva == null)
        //        await JsRuntime.InvokeAsync<string>("alert", $"Ubicacion Libre");
        //    else
        //        await JsRuntime.InvokeAsync<string>("alert", $"Ubicacion Ocupada.\nHora Inicio: {ubicacion.Reserva.HoraInicio}.\nHora Fin: {ubicacion.Reserva.HoraFin}.");
    }

    private async Task OnClickZona(MouseEvent m)
    {
        var zona = ZonasList.FirstOrDefault(x => x.Vertices.ContainsVertice(new LatLong() { Latitud = m.LatLng.Lat, Longitud = m.LatLng.Lng }));
        if (zona != null)
        {
            ZonaClickeada = zona;
            queComponenteMostrar = 4;
            StateHasChanged();
        }
    }

    private async Task OnClickComercio(MouseEvent m)
    {
        var comercio = comerciosList.FirstOrDefault(x => x.Latitud == m.LatLng.Lat && x.Longitud == m.LatLng.Lng);
        if (comercio != null)
        {
            ComercioClickeado = comercio;
            queComponenteMostrar = 3;
            StateHasChanged();
        }
    }

    private async Task LoadComercios()
    {
        foreach (var comercio in comerciosList)
        {
            var marker = await MarkerFactory.Create(new LatLng(comercio.Latitud, comercio.Longitud));
            await marker.BindTooltip($"{comercio.Nombre} - {comercio.HorarioAtencion}");
            await marker.OnClick(OnClickComercio);
            //await marker.AddTo(mapRef);
            ComerciosMarkers.Add(marker);
        }
    }

    private async Task LoadZonas()
    {
        var zona1 = new PolygonOptions()
        {
            Weight = 3,
            Color = "#4d29ff",
            FillOpacity = 0.2,
        };
        var zona2 = new PolygonOptions()
        {
            Weight = 4,
            Color = "#ffff29",
            FillOpacity = 0.35
        };
        var zona3 = new PolygonOptions()
        {
            Weight = 2,
            Color = "#29a2ff",
            FillOpacity = 0.2,
        };
        int i = 0;
        foreach (var zona in ZonasList)
        {
            i = i + 1;
            var poly = await PolygonFactory.Create(zona.Vertices.ToLeafletLatLng(), i % 3 == 0 ? zona3 : i % 3 == 1 ? zona2 : zona1);
            //await poly.BindPopup($"Costo: 2hs={zona.Costo2hs} - 4hs={zona.Costo4hs}");
            await poly.OnClick(OnClickZona);
            await poly.AddTo(mapRef);
        }
    }

    private async Task LoadUbicacionActual()
    {
        var IconoUbiActual = new IconOptions()
        {
            IconUrl = "/img/UbicacionActual.png",
            IconSize = new Point(28, 28),
            PopupAnchor = new Point(20, 20),
            TooltipAnchor = new Point(10, 0),
        };
        MarkerOptions markerOptionsUbiActual = new MarkerOptions()
        {
            Opacity = 1,
            Draggable = false,
            RiseOnHover = true,
            Title = "Posicion actual",
            IconRef = await this.IconFactory.Create(IconoUbiActual),
        };
        UbicacionActualMarker = await MarkerFactory.Create(ubicacionActual, markerOptionsUbiActual);
        await UbicacionActualMarker.BindTooltip($"Ubicacion Actual");
        await UbicacionActualMarker.OnClick(OnClickUbicacion);
        //await UbicacionActualMarker.AddTo(mapRef);
    }

    private async Task LoadReservaActual()
    {
        var IconOcupado = new IconOptions()
        {
            IconUrl = "/img/UbicacionReservada2.png",
            IconSize = new Point(25, 25),
            PopupAnchor = new Point(20, 20),
            TooltipAnchor = new Point(10, 0),
        };
        MarkerOptions markerOptionsOcupado = new MarkerOptions()
        {
            Opacity = 1,
            Draggable = false,
            RiseOnHover = true,
            Title = "Ocupado",
            IconRef = await this.IconFactory.Create(IconOcupado),
        };
        ReservaActualMarker = await MarkerFactory.Create(reservaActual, markerOptionsOcupado);
        await ReservaActualMarker.BindTooltip($"Reserva Actual");
        await ReservaActualMarker.OnClick(OnClickReservaActual);
        //await ReservaActualMarker.AddTo(mapRef);
    }

    private async Task LoadUbicaciones()
    {
        var IconLibre = new IconOptions()
        {
            IconUrl = "/img/UbicacionLibre2.png",
            IconSize = new Point(25, 25),
            PopupAnchor = new Point(20, 20),
            TooltipAnchor = new Point(10, 0),
        };
        MarkerOptions markerOptionsLibre = new MarkerOptions()
        {
            Opacity = 1,
            Draggable = false,
            RiseOnHover = true,
            Title = "Libre",
            IconRef = await this.IconFactory.Create(IconLibre),
        };
        foreach (var ubicacion in UbicacionesList)
        {
            var posicion = await MarkerFactory.Create(new LatLng(ubicacion.Latitud, ubicacion.Longitud), markerOptionsLibre);
            await posicion.BindTooltip($"Ubicacion Libre");
            await posicion.OnClick(OnClickUbicacion);
            //await posicion.AddTo(mapRef);
            UbicacionesMarkers.Add(posicion);
        }
    }

    private async Task PosicionInicial()
    {
        await mapRef.SetView(ubicacionActual);
    }
    private async Task PosicionReserva()
    {
        await mapRef.SetView(reservaActual);
    }

    private void InicializarMapa()
    {
        mapOptions = new MapOptions()
        {
            DivId = "mapId",
            Center = ubicacionActual,
            Zoom = 15,
            UrlTileLayer = "https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",
            SubOptions = new MapSubOptions()
            {
                Attribution = "&copy; <a lhref='http://www.openstreetmap.org/copyright'>OpenStreetMap</a>",
                TileSize = 512,
                ZoomOffset = -1,
                MaxZoom = 19,
            }
        };
    }

}

<style>
    #mapId {
        height: 750px;
    }
</style>
