
@if (IsLoading)
{
    <div class=" buttonMinSize @(HideTextOnClick is true ? "hideParent" : "")" style="display: contents;">
        <button @attributes="AdditionalParameters" disabled>
            @ChildContent
            <div class="spinner-border" role="status" style="width: 1rem;
                                                             height: 1rem;
                                                             border: 0.20em solid currentColor;
                                                             border-right-color: transparent;
                                                             vertical-align: text-bottom;
                                                             @(ChildContent is not null ? "margin-bottom: 0.15rem !important;" : "")">
                <span class="sr-only" />
            </div>
        </button>
    </div>
}
else
{
    <div class="buttonMinSize" style="display: contents;">
        <button @attributes="AdditionalParameters" @onclick="click">@ChildContent</button>
    </div>
}

@code {
    [Parameter] public EventCallback OnClick { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public bool HideTextOnClick { get; set; } = false;
    [Parameter(CaptureUnmatchedValues = true)] public IDictionary<string, object> AdditionalParameters { get; set; }

    bool IsLoading = false;

    //protected override void OnInitialized()
    //{
    //    //IsLoading = !OnClick.HasDelegate;
    //}

    private async Task click()
    {
        try
        {
            IsLoading = true;
            StateHasChanged();

            await OnClick.InvokeAsync();
        }
        finally
        {
            IsLoading = false;
        }
    }

}
